#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è Female Task Planner RAG —Å–∏—Å—Ç–µ–º—ã
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ RAG (Retrieval-Augmented Generation) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á
"""

import requests
import json
import time
from typing import List, Dict

API_BASE = "http://127.0.0.1:8000"

def print_header(title: str):
    """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    print(f"\n{'='*60}")
    print(f"üéØ {title}")
    print(f"{'='*60}")

def print_section(title: str):
    """–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏"""
    print(f"\nüìã {title}")
    print("-" * 40)

def demo_rag_retrieval():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è RAG retrieval"""
    print_section("RAG Retrieval - –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π")
    
    queries = [
        "—ç–Ω–µ—Ä–≥–∏—è –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
        "–≤–∞–∂–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ –∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏", 
        "—Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏",
        "–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤"
    ]
    
    for query in queries:
        try:
            response = requests.post(f"{API_BASE}/search", json={"query": query, "limit": 2})
            if response.status_code == 200:
                results = response.json()
                print(f"\nüîç –ó–∞–ø—Ä–æ—Å: '{query}'")
                for i, doc in enumerate(results, 1):
                    print(f"   {i}. {doc['content']} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {doc['relevance_score']:.2f})")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response.status_code}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def demo_phase_analysis():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–∑ —Ü–∏–∫–ª–∞"""
    print_section("–ê–Ω–∞–ª–∏–∑ —Ñ–∞–∑ –º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–æ–≥–æ —Ü–∏–∫–ª–∞")
    
    phases = ["menstruation", "follicular", "ovulation", "luteal"]
    
    for phase in phases:
        try:
            response = requests.get(f"{API_BASE}/phases/{phase}")
            if response.status_code == 200:
                data = response.json()["data"]
                print(f"\nüî¥ {phase.upper()}")
                print(f"   –î–Ω–∏: {data['phase_info']['days']}")
                print(f"   –§–∏–∑–∏—á–µ—Å–∫–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã: {', '.join(data['physical_effects'][:3])}...")
                print(f"   –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã: {', '.join(data['cognitive_effects'][:3])}...")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–∑—ã {phase}: {e}")

def demo_ai_advice():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è AI-—Å–æ–≤–µ—Ç–æ–≤ —Å RAG"""
    print_section("AI-—Å–æ–≤–µ—Ç—ã —Å RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º")
    
    test_cases = [
        {
            "task": "–ü—Ä–æ–≤–µ—Å—Ç–∏ –≤–∞–∂–Ω—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤",
            "phase": "ovulation",
            "expected": "good"
        },
        {
            "task": "–°–ª–æ–∂–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏",
            "phase": "menstruation", 
            "expected": "avoid"
        },
        {
            "task": "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞",
            "phase": "follicular",
            "expected": "good"
        },
        {
            "task": "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–¥–∞—á–µ",
            "phase": "luteal",
            "expected": "good"
        }
    ]
    
    for i, case in enumerate(test_cases, 1):
        try:
            response = requests.post(f"{API_BASE}/advice", json=case)
            if response.status_code == 200:
                advice = response.json()
                print(f"\nüìù –¢–µ—Å—Ç {i}: {case['task']}")
                print(f"   –§–∞–∑–∞: {case['phase']}")
                print(f"   –í–µ—Ä–¥–∏–∫—Ç: {advice['verdict']} (–æ–∂–∏–¥–∞–ª—Å—è: {case['expected']})")
                print(f"   –ü—Ä–∏—á–∏–Ω–∞: {advice['reason']}")
                print(f"   –°–æ–≤–µ—Ç: {advice['suggestion']}")
                print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {advice['confidence']:.2f}")
                print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {advice['source']}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def demo_rag_architecture():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã RAG"""
    print_section("–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ RAG —Å–∏—Å—Ç–µ–º—ã")
    
    print("""
üèóÔ∏è  RAG (Retrieval-Augmented Generation) –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:

1. üìö KNOWLEDGE BASE (–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π)
   - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∞–∑–∞—Ö —Ü–∏–∫–ª–∞
   - –§–∏–∑–∏—á–µ—Å–∫–∏–µ –∏ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   - –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –∑–∞–¥–∞—á–∞–º

2. üîç RETRIEVAL (–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ)
   - –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É
   - –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
   - –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
   - –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è

3. ü§ñ GENERATION (–ì–µ–Ω–µ—Ä–∞—Ü–∏—è)
   - AI-–º–æ–¥–µ–ª—å (Google Gemini) –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–≤–µ—Ç–æ–≤
   - Fallback —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ AI
   - –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
   - –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã

4. üìä EVALUATION (–û—Ü–µ–Ω–∫–∞)
   - Confidence scoring
   - Source attribution
   - Quality metrics
   - Fallback detection
    """)

def demo_api_endpoints():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è API endpoints"""
    print_section("API Endpoints")
    
    endpoints = [
        ("GET", "/health", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"),
        ("GET", "/phases", "–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–∞–∑—ã —Ü–∏–∫–ª–∞"),
        ("GET", "/phases/{phase}", "–î–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ–∞–∑—ã"),
        ("POST", "/search", "–ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π (RAG)"),
        ("POST", "/advice", "–ü–æ–ª—É—á–∏—Ç—å AI-—Å–æ–≤–µ—Ç —Å RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º")
    ]
    
    for method, endpoint, description in endpoints:
        print(f"   {method:4} {endpoint:20} - {description}")

def check_api_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API"""
    try:
        response = requests.get(f"{API_BASE}/health", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ API Status: Online")
            print(f"   RAG Enabled: {data.get('rag_enabled', False)}")
            print(f"   AI Available: {data.get('ai_available', False)}")
            return True
        else:
            print(f"‚ùå API Status: Error {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå API Status: Offline - {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print_header("Female Task Planner RAG System Demo")
    print("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞–≤—ã–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è RAG —Å–∏—Å—Ç–µ–º")
    print("üìö Retrieval-Augmented Generation –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    if not check_api_status():
        print("\n‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:")
        print("   cd api && python3 main_rag.py")
        return
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    demo_rag_architecture()
    demo_api_endpoints()
    demo_phase_analysis()
    demo_rag_retrieval()
    demo_ai_advice()
    
    print_header("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    print("üéâ RAG —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!")
    print("\nüí° –ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:")
    print("   ‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")
    print("   ‚Ä¢ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ")
    print("   ‚Ä¢ AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º")
    print("   ‚Ä¢ Fallback —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏")
    print("   ‚Ä¢ RESTful API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")

if __name__ == "__main__":
    main()
