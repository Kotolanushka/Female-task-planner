#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
import json
import time

API_BASE = "http://127.0.0.1:8000"

def test_health():
    """–¢–µ—Å—Ç health endpoint"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º health endpoint...")
    try:
        response = requests.get(f"{API_BASE}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Health check –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
            print(f"   –û—Ç–≤–µ—Ç: {response.json()}")
            return True
        else:
            print(f"‚ùå Health check failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def test_advice():
    """–¢–µ—Å—Ç advice endpoint"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º advice endpoint...")
    
    test_cases = [
        {
            "task": "–ü—Ä–æ–≤–µ—Å—Ç–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é",
            "phase": "ovulation",
            "locale": "ru",
            "expected_verdict": "good"
        },
        {
            "task": "–°–ª–æ–∂–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞",
            "phase": "menstruation",
            "locale": "ru",
            "expected_verdict": "avoid"
        },
        {
            "task": "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
            "phase": "follicular",
            "locale": "ru",
            "expected_verdict": "good"
        }
    ]
    
    success_count = 0
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"   –¢–µ—Å—Ç {i}: {test_case['task']} ({test_case['phase']})")
        try:
            response = requests.post(
                f"{API_BASE}/advice",
                json=test_case,
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                print(f"   ‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {data}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                required_fields = ["verdict", "reason", "suggestion"]
                if all(field in data for field in required_fields):
                    print(f"   ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                    success_count += 1
                else:
                    print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(test_cases)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    return success_count == len(test_cases)

def test_root():
    """–¢–µ—Å—Ç root endpoint"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º root endpoint...")
    try:
        response = requests.get(f"{API_BASE}/", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Root endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   –û—Ç–≤–µ—Ç: {response.json()}")
            return True
        else:
            print(f"‚ùå Root endpoint failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def main():
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Female Task Planner API")
    print("=" * 50)
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    print("‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    time.sleep(2)
    
    tests = [
        ("Health Check", test_health),
        ("Root Endpoint", test_root),
        ("Advice Endpoint", test_advice)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        if test_func():
            passed += 1
        else:
            print(f"‚ùå –¢–µ—Å—Ç {test_name} –Ω–µ –ø—Ä–æ—à–µ–ª")
    
    print(f"\n{'='*50}")
    print(f"üìä –ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
